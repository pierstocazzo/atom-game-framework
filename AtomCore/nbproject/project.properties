annotation.processing.enabled=true
annotation.processing.enabled.in.editor=false
annotation.processing.processors.list=
annotation.processing.run.all.processors=true
annotation.processing.source.output=${build.generated.sources.dir}/ap-source-output
application.desc=AtomCore is the core of the Atom framework
application.title=AtomCore
application.vendor=SGMedia
assets.compress=false
assets.excludes=assets.excludes=**/*.j3odata,**/*.mesh.xml,**/*.skeleton.xml,**/*.scene,**/*.material,**/*.obj,**/*.mtl,**/*.blend
assets.folder.name=assets
assets.jar.name=AtomAssets.jar
build.classes.dir=${build.dir}/classes
build.classes.excludes=**/*.java,**/*.form,**/*.groovy
# This directory is removed when the project is cleaned:
build.dir=build
build.generated.dir=${build.dir}/generated
build.generated.sources.dir=${build.dir}/generated-sources
# Only compile against the classpath explicitly listed here:
build.sysclasspath=ignore
build.test.classes.dir=${build.dir}/test/classes
build.test.results.dir=${build.dir}/test/results
compile.on.save=true
# Uncomment to specify the preferred debugger connection transport:
#debug.transport=dt_socket
debug.classpath=\
    ${run.classpath}
debug.test.classpath=\
    ${run.test.classpath}
# This directory is removed when the project is cleaned:
dist.dir=dist
dist.jar=${dist.dir}/Atom.jar
dist.javadoc.dir=${dist.dir}/javadoc
endorsed.classpath=
excludes=**/DFA.java,**/kinematic/**
file.reference.Atom-assets=assets
file.reference.Atom-Atom=.
includes=**
jar.archive.disabled=${jnlp.enabled}
jar.compress=false
jar.index=${jnlp.enabled}
javac.classpath=\
    ${libs.jme3.classpath}:\
    ${libs.jme3-libraries.classpath}:\
    ${libs.jme3-libraries-effects.classpath}:\
    ${libs.jme3-libraries-physics-native.classpath}:\
    ${libs.Forester_Beta_1.classpath}:\
    ${libs.Groovy2.0.0.classpath}:\
    ${libs.Guice.classpath}:\
    ${libs.Stateless4j.classpath}:\
    ${libs.Guava.classpath}:\
    ${libs.CommonLogging.classpath}:\
    ${libs.CommonLang.classpath}:\
    ${libs.CommonIO.classpath}:\
    ${libs.CommonConfiguration.classpath}:\
    ${libs.CommonMath.classpath}:\
    ${libs.tonegodGUI.classpath}:\
    ${libs.JCTree.classpath}
# Space-separated list of extra javac options
javac.compilerargs=
javac.deprecation=false
javac.processorpath=\
    ${javac.classpath}:\
    ${libs.JUnit4.classpath}
javac.source=1.6
javac.target=1.6
javac.test.classpath=\
    ${javac.classpath}:\
    ${build.classes.dir}:\
    ${libs.JUnit4.classpath}
javac.test.processorpath=\
    ${javac.test.classpath}
javadoc.additionalparam=
javadoc.author=false
javadoc.encoding=${source.encoding}
javadoc.noindex=false
javadoc.nonavbar=false
javadoc.notree=false
javadoc.private=false
javadoc.splitindex=true
javadoc.use=true
javadoc.version=false
javadoc.windowtitle=
jnlp.codebase.type=no.codebase
jnlp.descriptor=application
jnlp.enabled=false
jnlp.mixed.code=default
jnlp.offline-allowed=false
jnlp.signed=false
jnlp.signing=
jnlp.signing.alias=
jnlp.signing.keystore=
meta.inf.dir=${src.dir}/META-INF
mkdist.disabled=true
platform.active=default_platform
run.classpath=\
    ${javac.classpath}:\
    ${build.classes.dir}:\
    ${file.reference.Atom-assets}
# Space-separated list of JVM arguments used when running the project
# (you may also define separate properties like run-sys-prop.name=value instead of -Dname=value
# or test-sys-prop.name=value to set system properties for unit tests):
run.jvmargs=
run.test.classpath=\
    ${javac.test.classpath}:\
    ${build.test.classes.dir}
source.encoding=UTF-8
src.dir=src
test.src.dir=test
test.test.dir=test
compile.on.save.unsupported.groovy=true
